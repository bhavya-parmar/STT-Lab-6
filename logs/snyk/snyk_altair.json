{"$schema": "https://docs.oasis-open.org/sarif/sarif/v2.1.0/errata01/os/schemas/sarif-schema-2.1.0.json","version": "2.1.0","runs": [{"tool": {"driver" : {"name" : "SnykCode","semanticVersion" : "1.1300.0","version" : "1.1300.0","informationUri" : "https://docs.snyk.io/","rules" : [{"id": "javascript/DOMXSS","name": "DOMXSS","shortDescription": {"text": "DOM-based Cross-site Scripting (XSS)"},"defaultConfiguration": {"level": "warning"},"help": {"markdown": "## Details\n\nDOM-based Cross-Site Scripting (DOM XSS) is a client-side vulnerability in which attacker-controlled data (e.g., from `location.search`, `location.hash`, `document.referrer`, browser storage, `postMessage`, WebSockets) is read by JavaScript and written to dangerous DOM/JS sinks without proper validation or encoding, causing code to execute entirely in the browser. The payload may be delivered by the server or other channels, butΓÇöunlike reflected or stored XSSΓÇöthe server does not perform the injection/echo that triggers execution; the critical issue is a tainted data flow from source to sink within client-side logic, which traditional server-side defenses and many WAFs often miss.\n\nEffective mitigation of DOM XSS vulnerabilities requires implementing comprehensive input validation and output encoding strategies specifically designed for clientΓÇæside execution contexts. This includes establishing strict allowlisting mechanisms for userΓÇæcontrollable data, implementing contextΓÇæaware output encoding based on the specific DOM operation being performed, and adopting secure coding practices that minimize the attack surface exposed through dangerous DOM/JavaScript APIs. Additionally, modern web applications should leverage Content Security Policy (CSP) directives and other browser security features to establish defenseΓÇæinΓÇædepth protections against DOMΓÇæbased attacks.\n\nDOM XSS attacks have been extensively documented in security research and are frequently exploited to achieve various malicious objectives, including session hijacking through cookie theft, credential harvesting via phishing attacks, unauthorized actions performed on behalf of authenticated users, clientΓÇæside malware distribution, and sensitive data exfiltration. The clientΓÇæside nature of these attacks makes them effective at bypassing traditional perimeter security controls and targeting users directly within their browser environment.\n\n### Types of attacks\n\n| Type                         | Source Category          | Description                                                                                                                                         | Technical Details                                                                                                                                                                     |\n|------------------------------|--------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **URL Parameter Injection**  | Navigation               | Malicious payloads embedded within URL query parameters that are processed by vulnerable JavaScript code accessing `location.search` or similar properties. | Commonly exploits `URLSearchParams`, direct string parsing, or framework routing mechanisms that unsafely process query parameters (including History API updates like `pushState`). |\n| **Fragment Identifier Exploitation** | Navigation       | Attack vectors utilizing URL hash fragments (`#`) that are accessible through `location.hash` and processed by clientΓÇæside routing or content loading mechanisms. | Particularly prevalent in Single Page Applications (SPAs) with clientΓÇæside routing frameworks that process hashΓÇæbased navigation.                                                       |\n| **HTTP Referrer Manipulation** | Request Context       | Exploitation of `document.referrer` values that contain malicious payloads, typically originating from attackerΓÇæcontrolled websites linking to the vulnerable application. | Requires social engineering to direct users from attackerΓÇæcontrolled domains with crafted referrer values.                                                                            |\n| **Browser Storage Attacks**  | Persistent Storage       | Malicious data injection into `localStorage`, `sessionStorage`, or IndexedDB that is subsequently read and processed unsafely by application JavaScript.    | Can persist across sessions if the attacker can get data stored (via another bug or social engineering) and may be combined with other vectors for staged exploitation.               |\n| **Cross-Frame Communication** | Inter-Frame Messaging   | Exploitation of `postMessage` APIs where malicious data is transmitted between frames or windows and processed without proper origin validation and input sanitization. | Common in applications with embedded iframes or popup windows that implement crossΓÇæorigin communication mechanisms.                                                                    |\n| **WebSocket Message Injection** | Real-time Communication | Malicious payloads delivered through WebSocket connections that are processed by clientΓÇæside message handlers without adequate input validation.         | Particularly effective against realΓÇætime applications like chat systems, collaborative tools, or live data feeds.                                                                       |\n\n### Affected environments\n\nDOM XSS vulnerabilities can impact various categories of web applications and clientΓÇæside environments:\n\n- **Single Page Applications (SPAs)** utilizing frameworks such as React, Angular, Vue.js, or custom JavaScript implementations\n- **Progressive Web Applications (PWAs)** with extensive clientΓÇæside functionality and offline capabilities\n- **ClientΓÇæside routing implementations** including hashΓÇæbased and HTML5 History API routing mechanisms\n- **Browser extensions and addΓÇæons** with content script injection and web page interaction capabilities\n- **Hybrid mobile applications** utilizing WebView components and JavaScript bridge implementations\n- **Rich Internet Applications (RIAs)** with complex clientΓÇæside business logic and DOM manipulation\n- **Content Management Systems (CMS)** with client-side editing interfaces and dynamic content rendering\n- **Social media platforms and widgets** implementing clientΓÇæside content embedding and sharing functionality\n\n## Best practices for prevention\n\nThis section outlines comprehensive security measures designed to prevent DOM XSS vulnerabilities through secure development practices and technical controls.\n\n### Input Validation and Sanitization\n\n- **Implement strict input validation** for all clientΓÇæside data sources including URL parameters, fragment identifiers, referrer values, storage mechanisms, and crossΓÇæframe communications using allowlisting approaches rather than blacklisting methodologies.\n- **Establish contextual output encoding** appropriate for the specific DOM context where data will be utilized, including HTML entity encoding, JavaScript string escaping, CSS value encoding, and URL parameter encoding.\n- **Validate data origin and integrity** for crossΓÇæframe `postMessage` communications by implementing strict origin checking and message format validation to prevent malicious data injection from untrusted sources.\n- **Sanitize persistent storage data** by validating all data retrieved from `localStorage`, `sessionStorage`, or other clientΓÇæside storage mechanisms before processing or rendering within the application.\n\n### Secure DOM Manipulation Practices\n\n- **Avoid highΓÇærisk DOM sinks** including `innerHTML`, `outerHTML`, `insertAdjacentHTML`, `document.write()`, `document.writeln()`, `eval()`, `Function()`, `setTimeout()`/`setInterval()` with string arguments when processing userΓÇæcontrollable data.\n- **Utilize safer DOM manipulation methods** such as `textContent`, `createTextNode()`, and DOM element creation APIs that do not interpret content as executable code. Use `setAttribute()` only for nonΓÇæURL/nonΓÇæevent attributes and never to set `on*` handlers or dangerous URL attributes from untrusted data.\n- **Implement secure templating mechanisms** using frameworks or libraries that provide automatic output encoding and XSS protection rather than manual string concatenation for dynamic content generation.\n- **Enforce separation of data and code** by avoiding the construction of JavaScript code through string concatenation with userΓÇæcontrollable data and utilizing structured data formats like JSON for data transmission.\n\n### Browser Security Feature Implementation\n\n- **Deploy comprehensive Content Security Policy (CSP)** directives (e.g., `script-src`, `object-src`, `base-uri`, `frame-ancestors`) to limit script execution and reduce impact if a DOM XSS exists.\n- **Implement Subresource Integrity (SRI)** for all external JavaScript resources to prevent tampering with thirdΓÇæparty libraries that could introduce DOM XSS vulnerabilities.\n- **Utilize HTTP security headers** including `X-Content-Type-Options: nosniff`, `Referrer-Policy`, and (if CSP is not available) `X-Frame-Options`, while preferring CSPΓÇÖs `frame-ancestors` directive for clickjacking protection.\n- **Adopt modern browser defenses** such as Trusted Types (where supported) to prevent assignment to DOM sinks unless passed through an approved sanitizer. Treat CORS as an access-control mechanismΓÇönot a DOM XSS controlΓÇöand configure it appropriately to limit unnecessary cross-origin data exposure.\n\n### Development and Testing Practices\n\n- **Conduct regular security code reviews** focusing specifically on client-side data flow analysis to identify potential DOM XSS vulnerabilities during the development process.\n- **Implement automated static analysis** using specialized tools capable of detecting DOM XSS vulnerabilities in JavaScript code and identifying unsafe data flows from sources to sinks.\n- **Perform dynamic application security testing (DAST)** with specialized DOM XSS detection capabilities and manual penetration testing to validate the effectiveness of implemented security controls.\n- **Establish secure coding guidelines** for development teams including training on DOM XSS attack vectors, secure JavaScript programming practices, and proper use of securityΓÇæfocused libraries and frameworks.","text": ""},"properties": {"tags": ["javascript","DOMXSS","Security","SourceNonServer","SourceResourceAccess","SourceStackTrace","Taint"],"categories": ["Security"],"exampleCommitFixes": [{"commitURL": "https://github.com/codice/ddf/commit/a8c54db08a09e8104443fd8531c0f8b6cffda1c7?diff=split#diff-e3bb069f9efbc30d0207a7c690710bc5a3b2acac15a5b8425e622a88e63a41cdL-1","lines": [{"line": "$('#extramessage').html(decodeURIComponent(param[1].split('+').join(' ')));\n","lineNumber": 12,"lineChange": "removed"},{"line": "$('#extramessage').text(decodeURIComponent(param[1].split('+').join(' '))).html();\n","lineNumber": 12,"lineChange": "added"}]},{"commitURL": "https://github.com/Drive4ik/simple-tab-groups/commit/d23caa02378845671eb32ee2c43c368f857b47c3?diff=split#diff-efdba41d528998f946ce1103fa57532e3746b2e9b1984cb92c94a2526451aedbL-1","lines": [{"line": "document.getElementById('title').innerHTML = title || url;\n","lineNumber": 6,"lineChange": "removed"},{"line": "document.getElementById('title').innerText = title || url;\n","lineNumber": 6,"lineChange": "added"}]},{"commitURL": "https://github.com/mykter/TagTime-desktop/commit/684351457a3299047fa60563785aa1716df00888?diff=split#diff-821c318e2a22a1360159993ee2168341f78e7567d0b1c9996a76f3e0cfb27b26L-1","lines": [{"line": "document.getElementById(\"time\").innerHTML =\n","lineNumber": 4,"lineChange": "removed"},{"line": "    moment(time, 'x').format('HH:mm:ss');\n","lineNumber": 5,"lineChange": "removed"},{"line": "document.getElementById(\"time\").textContent = moment(time, 'x').format('HH:mm:ss');\n","lineNumber": 5,"lineChange": "added"}]}],"exampleCommitDescriptions": [],"precision": "very-high","repoDatasetSize": 227,"cwe": ["CWE-79"]}},{"id": "python/Jinja2AutoEscapeFalse","name": "Jinja2AutoEscapeFalse","shortDescription": {"text": "Jinja auto-escape is set to false."},"defaultConfiguration": {"level": "warning"},"help": {"markdown": "## Details\n\nJinja2 is a python templating library that can be configured to escape values and avoid XSS vulnerabilities. However, the library by default sets the autoescaping to false.\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n## Best practices for prevention\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.","text": ""},"properties": {"tags": ["python","Jinja2AutoEscapeFalse","Security"],"categories": ["Security"],"exampleCommitFixes": [{"commitURL": "https://github.com/GoogleCloudPlatform/titan/commit/0bf5c35ddc04b1020a14ed910af41e9ae37b1c1b?diff=split#diff-c11ef690b2d17d9c12d561977691c7d5b8f04c24db5a1f2f7266954296169432L-1","lines": [{"line": "jinja_environment = jinja2.Environment(\n","lineNumber": 23,"lineChange": "none"},{"line": "    loader=jinja2.FileSystemLoader(os.path.dirname(__file__)))\n","lineNumber": 24,"lineChange": "removed"},{"line": "    loader=jinja2.FileSystemLoader(os.path.dirname(__file__)), autoescape=True)\n","lineNumber": 24,"lineChange": "added"}]},{"commitURL": "https://github.com/remcoder/Pxxl.js/commit/707b0de4c23a0b62b3367dd7515e9df08c0a85c1?diff=split#diff-68f63e8cccbcb05c3a3fe3cb8f8a020e0b62330133bce1aacdca14328932410aL-1","lines": [{"line": "env = Environment(loader=FileSystemLoader('templates'))\n","lineNumber": 1,"lineChange": "removed"},{"line": "env = Environment(loader=FileSystemLoader('templates'), \n","lineNumber": 1,"lineChange": "added"},{"line": "  extensions=['jinja2.ext.autoescape'],\n","lineNumber": 2,"lineChange": "added"},{"line": "  autoescape=True)\n","lineNumber": 3,"lineChange": "added"}]},{"commitURL": "https://github.com/spoqa/dodotable/commit/3a6c03fdb9bc7af1216f5d5f46fee470231fa99d?diff=split#diff-04c42fa07872724974779079833c98fe763bfad87dbc50969c998bb2c18affa7L-1","lines": [{"line": "env = Environment(loader=loader,\n","lineNumber": 57,"lineChange": "none"},{"line": "                  extensions=('jinja2.ext.with_',))\n","lineNumber": 56,"lineChange": "removed"},{"line": "                  extensions=['jinja2.ext.i18n', 'jinja2.ext.with_'],\n","lineNumber": 58,"lineChange": "added"},{"line": "                  autoescape=True)\n","lineNumber": 59,"lineChange": "added"}]}],"exampleCommitDescriptions": [],"precision": "very-high","repoDatasetSize": 44,"cwe": ["CWE-79"]}},{"id": "python/PT","name": "PT","shortDescription": {"text": "Path Traversal"},"defaultConfiguration": {"level": "warning"},"help": {"markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```","text": ""},"properties": {"tags": ["python","PT","Security","SourceNonServer","SourceLocalEnv","SourceEnvironmentVariable","Taint"],"categories": ["Security"],"exampleCommitFixes": [{"commitURL": "https://github.com/cmusatyalab/opendiamond/commit/398049c187ee644beabab44d6fece82251c1ea56?diff=split#diff-70a9940f7965191dc6ca548a38cd1bde7ec7ceaf10f26ca454cd4223d5d50fa9L-1","lines": [{"line": "    return os.path.join(DATAROOT, obj_path)\n","lineNumber": 122,"lineChange": "removed"},{"line": "    return safe_join(DATAROOT, obj_path)\n","lineNumber": 123,"lineChange": "added"},{"line": "\n","lineNumber": 124,"lineChange": "none"},{"line": "\n","lineNumber": 125,"lineChange": "none"},{"line": "def _get_index_absolute_path(index):\n","lineNumber": 126,"lineChange": "none"},{"line": "    return os.path.join(INDEXDIR, index)\n","lineNumber": 126,"lineChange": "none"},{"line": "\n","lineNumber": 128,"lineChange": "none"},{"line": "\n","lineNumber": 129,"lineChange": "none"},{"line": "@scope_blueprint.route('/obj/<path:obj_path>')\n","lineNumber": 130,"lineChange": "none"},{"line": "def get_object_src_http(obj_path):\n","lineNumber": 131,"lineChange": "none"},{"line": "    path = _get_obj_absolute_path(obj_path)\n","lineNumber": 132,"lineChange": "none"},{"line": "\n","lineNumber": 133,"lineChange": "none"},{"line": "    headers = Headers()\n","lineNumber": 134,"lineChange": "none"},{"line": "    # With add_etags=True, conditional=True\n","lineNumber": 135,"lineChange": "none"},{"line": "    # Flask should be smart enough to do 304 Not Modified\n","lineNumber": 136,"lineChange": "none"},{"line": "    response = send_file(path,\n","lineNumber": 137,"lineChange": "none"}]},{"commitURL": "https://github.com/fonttools/fonttools/commit/0b99c8968e04e2e36c6c46ad8bb1a550d25969b4?diff=split#diff-e8b6161353c7ce5b13e62df1da329a85de0ef80ce8f039d283c25bf892b2b600L-1","lines": [{"line": "\n","lineNumber": 16,"lineChange": "added"},{"line": "destdir = None\n","lineNumber": 17,"lineChange": "added"},{"line": "if sys.argv[1:]:\n","lineNumber": 18,"lineChange": "added"},{"line": "\tdestdir = os.path.normpath(os.path.join(os.getcwd(), sys.argv[1]))\n","lineNumber": 19,"lineChange": "added"},{"line": "\tassert os.path.isdir(destdir), \"destination is not an existing directory\"\n","lineNumber": 20,"lineChange": "added"},{"line": "\n","lineNumber": 21,"lineChange": "added"},{"line": "os.chdir(wdir)\n","lineNumber": 22,"lineChange": "none"},{"line": "\n","lineNumber": 23,"lineChange": "none"},{"line": "tar = src + \".tar\"\n","lineNumber": 24,"lineChange": "none"},{"line": "gz = tar + \".gz\"\n","lineNumber": 25,"lineChange": "none"},{"line": "tgz = src + \".tgz\"\n","lineNumber": 19,"lineChange": "none"},{"line": "\n","lineNumber": 26,"lineChange": "none"},{"line": "print \"source:\", src\n","lineNumber": 27,"lineChange": "none"},{"line": "print \"dest:\", tgz\n","lineNumber": 22,"lineChange": "none"},{"line": "\n","lineNumber": 29,"lineChange": "none"},{"line": "os.system('tar --exclude=CVS --exclude=%s -cf %s %s' % (scriptname, tar, src))\n","lineNumber": 30,"lineChange": "none"},{"line": "os.system('gzip -9v %s' % tar)\n","lineNumber": 31,"lineChange": "none"},{"line": "os.rename(gz, tgz)\n","lineNumber": 26,"lineChange": "removed"},{"line": "\n","lineNumber": 32,"lineChange": "added"},{"line": "if destdir:\n","lineNumber": 33,"lineChange": "added"},{"line": "\tprint \"destination directory:\", destdir\n","lineNumber": 34,"lineChange": "added"},{"line": "\tos.system('mv %s %s' % (gz, destdir))\n","lineNumber": 35,"lineChange": "added"},{"line": "\n","lineNumber": 36,"lineChange": "added"}]},{"commitURL": "https://github.com/Guad/fuwa/commit/955baf1c0e8824f08a96e48a350ee3cd0e3c5493?diff=split#diff-568470d013cd12e4f388206520da39ab9a4e4c3c6b95846cbc281abc1ba3c959L-1","lines": [{"line": "import string, random\n","lineNumber": 1,"lineChange": "removed"},{"line": "import string, random, hashlib, os\n","lineNumber": 1,"lineChange": "added"},{"line": "from werkzeug import secure_filename\n","lineNumber": 2,"lineChange": "added"},{"line": "\n","lineNumber": 3,"lineChange": "added"},{"line": "#Load config file\n","lineNumber": 4,"lineChange": "added"},{"line": "config = {}\n","lineNumber": 5,"lineChange": "added"},{"line": "with open('config.ini', 'r') as file:\n","lineNumber": 6,"lineChange": "added"},{"line": "\tfor line in file.read().splitlines():\n","lineNumber": 7,"lineChange": "added"},{"line": "\t\tline = line.split('==')\n","lineNumber": 8,"lineChange": "added"},{"line": "\t\tconfig[line[0]] = line[1]\n","lineNumber": 9,"lineChange": "added"},{"line": "\n","lineNumber": 10,"lineChange": "none"},{"line": "app = flask.Flask(__name__) #Initialize our application\n","lineNumber": 11,"lineChange": "none"},{"line": "app.config['MAX_CONTENT_LENGTH'] = 10 * 1024 * 1024 #Set the upload limit to 10MiB\n","lineNumber": 12,"lineChange": "none"},{"line": "\n","lineNumber": 14,"lineChange": "none"},{"line": "def genHash(seed): #Generate five letter filenames for our files\n","lineNumber": 15,"lineChange": "none"},{"line": "    base = string.ascii_lowercase+string.digits \n","lineNumber": 16,"lineChange": "none"},{"line": "    random.seed(seed)\n","lineNumber": 17,"lineChange": "none"},{"line": "    hash_value = \"\"\n","lineNumber": 18,"lineChange": "none"},{"line": "    for i in range(5):\n","lineNumber": 19,"lineChange": "none"},{"line": "        hash_value += random.choice(base)\n","lineNumber": 20,"lineChange": "none"},{"line": "    return hash_value\n","lineNumber": 21,"lineChange": "none"},{"line": "\n","lineNumber": 22,"lineChange": "none"},{"line": "\n","lineNumber": 23,"lineChange": "none"},{"line": "@app.route('/', methods=['GET', 'POST'])\n","lineNumber": 24,"lineChange": "none"},{"line": "def index():\n","lineNumber": 25,"lineChange": "none"},{"line": "\tif flask.request.method == 'POST':\n","lineNumber": 26,"lineChange": "none"},{"line": "\t\t\"\"\"\n","lineNumber": 27,"lineChange": "none"},{"line": "\t\t\tFile upload happens here.\n","lineNumber": 28,"lineChange": "none"},{"line": "\t\t\tWe get your filename and convert it to our hash with your extension.\n","lineNumber": 29,"lineChange": "none"},{"line": "\t\t\tThen we redirect to the file itself.\n","lineNumber": 30,"lineChange": "none"},{"line": "\t\t\"\"\"\n","lineNumber": 31,"lineChange": "none"},{"line": "\t\tf = flask.request.files['file']\n","lineNumber": 32,"lineChange": "none"},{"line": "\t\textension = f.filename.split('.')[-1]\n","lineNumber": 24,"lineChange": "removed"},{"line": "\t\tfilename = genHash(f.filename) + '.' + extension\n","lineNumber": 25,"lineChange": "removed"},{"line": "\t\tf.save('static/files/%s' % filename)\n","lineNumber": 26,"lineChange": "removed"},{"line": "\t\tprint 'Uploaded file \\'%s\\'' % filename #Log what file was uploaded\n","lineNumber": 27,"lineChange": "removed"},{"line": "\t\treturn flask.redirect(flask.url_for('getFile', filename=filename))\n","lineNumber": 28,"lineChange": "removed"},{"line": "\t\t\n","lineNumber": 33,"lineChange": "added"},{"line": "\t\thasher = hashlib.md5() \t\t\n","lineNumber": 34,"lineChange": "added"},{"line": "\t\tbuf = f.read()\t\t   \t\t\n","lineNumber": 35,"lineChange": "added"},{"line": "\t\tf.seek(0) #Set cursor back to position 0 so we can read it again in the save function.\n","lineNumber": 36,"lineChange": "added"},{"line": "\t\t\t\t\t\t\t\t\t# We hash the file to get its filename.\t   \t\t\n","lineNumber": 37,"lineChange": "added"},{"line": "\t\t\t\t\t\t\t\t\t# So that we can upload two different images with the same filename,\n","lineNumber": 38,"lineChange": "added"},{"line": "\t\thasher.update(buf)\t   \t\t# But not two same images with different filenames.\n","lineNumber": 39,"lineChange": "added"},{"line": "\t\tdirname = genHash(hasher.hexdigest())\n","lineNumber": 40,"lineChange": "added"},{"line": "\t\tif not os.path.exists(\"static/files/%s\" % dirname): # Check if the folder already exists\n","lineNumber": 41,"lineChange": "added"},{"line": "\t\t\tos.mkdir('static/files/%s' % dirname) #Make it\n","lineNumber": 42,"lineChange": "added"},{"line": "\t\t\tf.save('static/files/%s/%s' % (dirname, secure_filename(f.filename)))\n","lineNumber": 43,"lineChange": "added"},{"line": "\t\t\tprint 'Uploaded file \\'%s\\'' % secure_filename(f.filename) #Log what file was uploaded\n","lineNumber": 44,"lineChange": "added"},{"line": "\t\t\treturn flask.redirect(flask.url_for('getFile', dirname=dirname,filename=secure_filename(f.filename)))\n","lineNumber": 45,"lineChange": "added"},{"line": "\t\telse:\n","lineNumber": 46,"lineChange": "added"},{"line": "\t\t\tflask.flash('File already exists in %s!' % dirname) #Display a message for the user.\n","lineNumber": 47,"lineChange": "added"},{"line": "\t\t\treturn flask.redirect(flask.url_for('index'))\n","lineNumber": 48,"lineChange": "added"}]}],"exampleCommitDescriptions": [],"precision": "very-high","repoDatasetSize": 180,"cwe": ["CWE-23"]}}]}},"results": [{"ruleId": "javascript/DOMXSS","ruleIndex": 0,"level": "warning","message": {"text":"Unsanitized input from an exception flows into innerHTML, where it is used to dynamically construct the HTML page on client side. This may result in a DOM Based Cross-Site Scripting attack (DOMXSS).","markdown":"Unsanitized input from {0} {1} into {2}, where it is used to dynamically construct the HTML page on client side. This may result in a DOM Based Cross-Site Scripting attack (DOMXSS).","arguments": ["[an exception](0)","[flows](1),(2),(3),(4),(5),(6),(7)","[innerHTML](8)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "altair/jupyter/js/index.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":14,  "endLine":18,  "startColumn":13,  "endColumn":23}  }}],"fingerprints": {"identity": "fe0eb08a-93e9-49e1-8b5e-e1c08d6df605","0": "8665e86f0e920476e89111ad40ec968984a85b11fc687b3b5056f2079043ff5b","1": "2d06e3d6.a29752f0.98501263.7da15f0a.9cde7c93.dbe83c7e.cd61fc56.545e9171.51bd987d.4773f344.0bdc4564.873b6d43.5bcab2b0.faaa10ae.83265159.e983fa66","snyk/asset/finding/v1": "fe0eb08a-93e9-49e1-8b5e-e1c08d6df605"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "altair/jupyter/js/index.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":15,  "endLine":15,  "startColumn":47,  "endColumn":54}}}},{"location": {"id": 1,"physicalLocation": {"artifactLocation": {  "uri": "altair/jupyter/js/index.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":15,  "endLine":15,  "startColumn":47,  "endColumn":54}}}},{"location": {"id": 2,"physicalLocation": {"artifactLocation": {  "uri": "altair/jupyter/js/index.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":15,  "endLine":15,  "startColumn":41,  "endColumn":54}}}},{"location": {"id": 3,"physicalLocation": {"artifactLocation": {  "uri": "altair/jupyter/js/index.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":14,  "endLine":15,  "startColumn":13,  "endColumn":54}}}},{"location": {"id": 4,"physicalLocation": {"artifactLocation": {  "uri": "altair/jupyter/js/index.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":14,  "endLine":15,  "startColumn":13,  "endColumn":63}}}},{"location": {"id": 5,"physicalLocation": {"artifactLocation": {  "uri": "altair/jupyter/js/index.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":14,  "endLine":16,  "startColumn":13,  "endColumn":83}}}},{"location": {"id": 6,"physicalLocation": {"artifactLocation": {  "uri": "altair/jupyter/js/index.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":14,  "endLine":17,  "startColumn":13,  "endColumn":71}}}},{"location": {"id": 7,"physicalLocation": {"artifactLocation": {  "uri": "altair/jupyter/js/index.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":14,  "endLine":18,  "startColumn":13,  "endColumn":23}}}},{"location": {"id": 8,"physicalLocation": {"artifactLocation": {  "uri": "altair/jupyter/js/index.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":14,  "endLine":18,  "startColumn":13,  "endColumn":23}}}}]}]}],"properties": {"isAutofixable": true,"priorityScore": 512,"priorityScoreFactors": [  {"label": true,"type": "hotFileCodeFlow"  },  {"label": true,"type": "fixExamples"  }]}},{"ruleId": "python/Jinja2AutoEscapeFalse","ruleIndex": 1,"level": "warning","message": {"text":"jinja2.Template is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.","markdown":"{0} is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.","arguments": ["[jinja2.Template](0)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "altair/utils/html.py",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":13,  "endLine":13,  "startColumn":17,  "endColumn":32}  }}],"fingerprints": {"0": "b71a8a8da70c312935632080b692c2b9c959058001933cc46c89b5227536aafd","1": "d4c0fe09.cd8ee6a8.79323f81.137a509e.813a85bb.a1632d4f.49b20adc.742d9b21.d4c0fe09.cd8ee6a8.79323f81.137a509e.813a85bb.a1632d4f.49b20adc.742d9b21","snyk/asset/finding/v1": "fc251618-26cc-4295-a1de-5b03940be9d7","identity": "fc251618-26cc-4295-a1de-5b03940be9d7"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "altair/utils/html.py",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":13,  "endLine":13,  "startColumn":17,  "endColumn":32}}}}]}]}],"properties": {"isAutofixable": true,"priorityScore": 628,"priorityScoreFactors": [  {"label": true,"type": "multipleOccurrence"  },  {"label": true,"type": "hotFileSource"  },  {"label": true,"type": "fixExamples"  }]}},{"ruleId": "python/Jinja2AutoEscapeFalse","ruleIndex": 1,"level": "warning","message": {"text":"jinja2.Template is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.","markdown":"{0} is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.","arguments": ["[jinja2.Template](0)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "altair/utils/html.py",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":99,  "endLine":99,  "startColumn":27,  "endColumn":42}  }}],"fingerprints": {"1": "d4c0fe09.e59887ac.79323f81.139c59a8.813a85bb.cf01f738.49b20adc.742d9b21.d4c0fe09.e59887ac.79323f81.139c59a8.813a85bb.cf01f738.49b20adc.742d9b21","snyk/asset/finding/v1": "b0cfa04f-c8f0-4c2f-ad84-7052e8139bc6","identity": "b0cfa04f-c8f0-4c2f-ad84-7052e8139bc6","0": "a8ca066bd07ba223ae05e74d8a3d38d11b4ff99384c10ec7e5709e273e04cd9d"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "altair/utils/html.py",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":99,  "endLine":99,  "startColumn":27,  "endColumn":42}}}}]}]}],"properties": {"isAutofixable": true,"priorityScore": 628,"priorityScoreFactors": [  {"label": true,"type": "multipleOccurrence"  },  {"label": true,"type": "hotFileSource"  },  {"label": true,"type": "fixExamples"  }]}},{"ruleId": "python/Jinja2AutoEscapeFalse","ruleIndex": 1,"level": "warning","message": {"text":"jinja2.Template is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.","markdown":"{0} is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.","arguments": ["[jinja2.Template](0)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "altair/utils/html.py",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":177,  "endLine":177,  "startColumn":24,  "endColumn":39}  }}],"fingerprints": {"identity": "61e741a6-a957-418d-b0ff-1d0dbcdcb960","0": "1c70499fa131c1797fc4504a2596c9699af7f649272b5508260bb3f0a502789f","1": "d4c0fe09.e59887ac.bf6f2e72.6fa65a58.813a85bb.a1632d4f.49b20adc.650edeed.d4c0fe09.e59887ac.bf6f2e72.6fa65a58.813a85bb.a1632d4f.49b20adc.650edeed","snyk/asset/finding/v1": "61e741a6-a957-418d-b0ff-1d0dbcdcb960"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "altair/utils/html.py",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":177,  "endLine":177,  "startColumn":24,  "endColumn":39}}}}]}]}],"properties": {"isAutofixable": true,"priorityScore": 628,"priorityScoreFactors": [  {"label": true,"type": "multipleOccurrence"  },  {"label": true,"type": "hotFileSource"  },  {"label": true,"type": "fixExamples"  }]}},{"ruleId": "python/Jinja2AutoEscapeFalse","ruleIndex": 1,"level": "warning","message": {"text":"jinja2.Template is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.","markdown":"{0} is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.","arguments": ["[jinja2.Template](0)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "altair/utils/html.py",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":212,  "endLine":212,  "startColumn":22,  "endColumn":37}  }}],"fingerprints": {"identity": "0f530bad-92d4-444f-a22c-2513303cfef7","0": "57793ae773b023dbbf7896df367f02e969bb4de4f81b90a6ad500b7f560ef680","1": "d4c0fe09.e59887ac.f18f103e.f9b9c09d.08e85031.a1632d4f.49b20adc.742d9b21.d4c0fe09.e59887ac.f18f103e.f9b9c09d.08e85031.a1632d4f.49b20adc.742d9b21","snyk/asset/finding/v1": "0f530bad-92d4-444f-a22c-2513303cfef7"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "altair/utils/html.py",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":212,  "endLine":212,  "startColumn":22,  "endColumn":37}}}}]}]}],"properties": {"isAutofixable": true,"priorityScore": 628,"priorityScoreFactors": [  {"label": true,"type": "multipleOccurrence"  },  {"label": true,"type": "hotFileSource"  },  {"label": true,"type": "fixExamples"  }]}},{"ruleId": "python/Jinja2AutoEscapeFalse","ruleIndex": 1,"level": "warning","message": {"text":"jinja2.Template is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.","markdown":"{0} is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.","arguments": ["[jinja2.Template](0)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "sphinxext/altairgallery.py",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":38,  "endLine":38,  "startColumn":20,  "endColumn":35}  }}],"fingerprints": {"identity": "c5e4ae52-2dea-46f5-b1c5-f926270714fc","0": "91e4111ff9fdf6f39c85cff7b594c3d9631b59ef8cc0124403fe7e69344885c4","1": "786aef2e.cd8ee6a8.79323f81.139c59a8.813a85bb.945de170.49b20adc.742d9b21.786aef2e.cd8ee6a8.d6317f61.139c59a8.813a85bb.5bf9262c.49b20adc.742d9b21","snyk/asset/finding/v1": "c5e4ae52-2dea-46f5-b1c5-f926270714fc"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "sphinxext/altairgallery.py",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":38,  "endLine":38,  "startColumn":20,  "endColumn":35}}}}]}]}],"properties": {"isAutofixable": true,"priorityScore": 628,"priorityScoreFactors": [  {"label": true,"type": "multipleOccurrence"  },  {"label": true,"type": "hotFileSource"  },  {"label": true,"type": "fixExamples"  }]}},{"ruleId": "python/Jinja2AutoEscapeFalse","ruleIndex": 1,"level": "warning","message": {"text":"jinja2.Template is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.","markdown":"{0} is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.","arguments": ["[jinja2.Template](0)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "sphinxext/altairgallery.py",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":98,  "endLine":98,  "startColumn":24,  "endColumn":39}  }}],"fingerprints": {"1": "d4c0fe09.e59887ac.79323f81.139c59a8.813a85bb.a1632d4f.49b20adc.742d9b21.d4c0fe09.e59887ac.d6317f61.139c59a8.813a85bb.5bf9262c.49b20adc.742d9b21","snyk/asset/finding/v1": "27ed0010-bc8d-46b0-b549-404d69c555da","identity": "27ed0010-bc8d-46b0-b549-404d69c555da","0": "867e2c70dc0b97b9e71de84e425240e37dbb8d1fe136f1f4dc968171f239c283"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "sphinxext/altairgallery.py",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":98,  "endLine":98,  "startColumn":24,  "endColumn":39}}}}]}]}],"properties": {"isAutofixable": true,"priorityScore": 628,"priorityScoreFactors": [  {"label": true,"type": "multipleOccurrence"  },  {"label": true,"type": "hotFileSource"  },  {"label": true,"type": "fixExamples"  }]}},{"ruleId": "python/Jinja2AutoEscapeFalse","ruleIndex": 1,"level": "warning","message": {"text":"jinja2.Template is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.","markdown":"{0} is called with no autoescape argument (autoescaping is disabled by default). This increases the risk of Cross-Site Scripting (XSS) attacks.","arguments": ["[jinja2.Template](0)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "sphinxext/altairgallery.py",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":120,  "endLine":120,  "startColumn":20,  "endColumn":35}  }}],"fingerprints": {"identity": "2c9fa3c9-689e-4cf6-959d-056e81522cad","0": "dd17f30a81d171c361188c9a87b4dc50a2646464874bd753a3d53ec7cd01b0f1","1": "d4c0fe09.5873e280.79323f81.ded3ec1c.813a85bb.a1632d4f.49b20adc.742d9b21.d4c0fe09.5873e280.d6317f61.ded3ec1c.813a85bb.5bf9262c.49b20adc.742d9b21","snyk/asset/finding/v1": "2c9fa3c9-689e-4cf6-959d-056e81522cad"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "sphinxext/altairgallery.py",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":120,  "endLine":120,  "startColumn":20,  "endColumn":35}}}}]}]}],"properties": {"isAutofixable": true,"priorityScore": 628,"priorityScoreFactors": [  {"label": true,"type": "multipleOccurrence"  },  {"label": true,"type": "hotFileSource"  },  {"label": true,"type": "fixExamples"  }]}},{"ruleId": "python/PT","ruleIndex": 2,"level": "warning","message": {"text":"Unsanitized input from an environment variable flows into path concatenation, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.","markdown":"Unsanitized input from an environment variable {0} into {1}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.","arguments": ["[flows](0),(1),(2)","[path concatenation](3)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "altair/datasets/_cache.py",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":309,  "endLine":309,  "startColumn":9,  "endColumn":82}  }}],"fingerprints": {"identity": "4ec96558-8e59-41ca-88d2-94c159fb7547","0": "70ae24edf482e8fe7d49400ef89d8c9f75c8cc6591488bf576831bf1f70de90a","1": "4df04b24.3b5d1a06.aa1f5f92.b6c9ef81.2d1c52c1.ba14daf2.59c14152.d14165fe.4df04b24.563bf84a.b588a99c.b6c9ef81.989605ea.f76aa0c6.96b9fa58.f46ed94e","snyk/asset/finding/v1": "4ec96558-8e59-41ca-88d2-94c159fb7547"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "altair/datasets/_cache.py",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":309,  "endLine":309,  "startColumn":14,  "endColumn":24}}}},{"location": {"id": 1,"physicalLocation": {"artifactLocation": {  "uri": "altair/datasets/_cache.py",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":309,  "endLine":309,  "startColumn":14,  "endColumn":28}}}},{"location": {"id": 2,"physicalLocation": {"artifactLocation": {  "uri": "altair/datasets/_cache.py",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":309,  "endLine":309,  "startColumn":9,  "endColumn":13}}}},{"location": {"id": 3,"physicalLocation": {"artifactLocation": {  "uri": "altair/datasets/_cache.py",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":309,  "endLine":309,  "startColumn":9,  "endColumn":82}}}}]}]}],"properties": {"isAutofixable": true,"priorityScore": 512,"priorityScoreFactors": [  {"label": true,"type": "hotFileCodeFlow"  },  {"label": true,"type": "fixExamples"  }]}}],"properties": {"coverage": [{"files": 3,"isSupported": true,"lang": ".html","type": "SUPPORTED"},{"files": 1,"isSupported": true,"lang": ".js","type": "SUPPORTED"},{"files": 413,"isSupported": true,"lang": ".py","type": "SUPPORTED"}]},"automationDetails": {"id": "Snyk/Code/2025-10-13T20:07:11Z"}}]}
